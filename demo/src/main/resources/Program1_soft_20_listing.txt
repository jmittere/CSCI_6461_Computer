                  LOC 8
000010   000036   Data 30
000011   102210   LDX 2,8  ;LOAD IXR2 with 30 for use in loop later
000012   000000   Data 0 ;unused
000013   000012   Data 10 ;stores address of input value with lowest diff, value will not be 10 at the end
000014   000001   Data 1 ;superval ,val we are checking against
000015   000000   Data 0 ;diff between superval and current input val
000016   077776   Data 32766 ; old minimum diff
000017   000000   Data 0
000020   000025   Data 21 ;stores number of times to loop and check inputval against superval, 1 more than num of inputVal
000021   001750   Data 1000 ;store address of nextInputval
000022   102121   LDX 1,17  ;load IXR1 with 1000 
                  LOC 500
000764   142000   IN 0,0 ;input superVal from user
000765   144001   OUT 0,1 ;output superVal to console printer
000766   004014   STR 0,0,12 ;store superVal at 12
000767   142000   IN 0,0 ;input first value from user
000770   144001   OUT 0,1 ;output first value to console printer
000771   004100   STR 0,1,0 ;store first value at 1000
000772   142000   IN 0,0 ;input second value from user
000773   144001   OUT 0,1 ;output second value to console printer
000774   004101   STR 0,1,1 ;store second value at 1001
000775   142000   IN 0,0 ;input third value from user
000776   144001   OUT 0,1 ;output third value to console printer
000777   004102   STR 0,1,2 ;store third value at 1002
001000   142000   IN 0,0 ;input fourth value from user
001001   144001   OUT 0,1 ;output fourth value to console printer
001002   004103   STR 0,1,3 ;store fourth value at 1003
001003   142000   IN 0,0 ;input fifth value from user
001004   144001   OUT 0,1 ;output fifth value to console printer
001005   004104   STR 0,1,4 ;store fifth value at 1004
001006   142000   IN 0,0 ;input sixth value from user
001007   144001   OUT 0,1 ;output sixth value to console printer
001010   004105   STR 0,1,5 ;store sixth value at 1005
001011   142000   IN 0,0 ;input seventh value from user
001012   144001   OUT 0,1 ;output seventh value to console printer
001013   004106   STR 0,1,6 ;store seventh value at 1006
001014   142000   IN 0,0 ;input eigth value from user
001015   144001   OUT 0,1 ;output eigth value to console printer
001016   004107   STR 0,1,7 ;store eigth value at 1007
001017   142000   IN 0,0 ;input ninth value from user
001020   144001   OUT 0,1 ;output ninth value to console printer
001021   004110   STR 0,1,8 ;store ninth value at 1008
001022   142000   IN 0,0 ;input tenth value from user
001023   144001   OUT 0,1 ;output tenth value to console printer
001024   004111   STR 0,1,9 ;store tenth value at 1009
001025   142000   IN 0,0 ;input eleventh value from user
001026   144001   OUT 0,1 ;output eleventh value to console printer
001027   004112   STR 0,1,10 ;store eleventh value at 1010
001030   142000   IN 0,0 ;input twelth value from user
001031   144001   OUT 0,1 ;output twelth value to console printer
001032   004113   STR 0,1,11 ;store twelth value at 1011
001033   142000   IN 0,0 ;input thirteenth value from user
001034   144001   OUT 0,1 ;output thirteenth value to console printer
001035   004114   STR 0,1,12 ;store thirteenth value at 1012
001036   142000   IN 0,0 ;input fourteenth value from user
001037   144001   OUT 0,1 ;output fourteenth value to console printer
001040   004115   STR 0,1,13 ;store fourteenth value at 1013
001041   142000   IN 0,0 ;input fifteenth value from user
001042   144001   OUT 0,1 ;output fifteenth value to console printer
001043   004116   STR 0,1,14 ;store fifteenth value at 1014
001044   142000   IN 0,0 ;input sixteenth value from user
001045   144001   OUT 0,1 ;output sixteenth value to console printer
001046   004117   STR 0,1,15 ;store sixteenth value at 1015
001047   142000   IN 0,0 ;input seventeenth value from user
001050   144001   OUT 0,1 ;output seventeenth value to console printer
001051   004120   STR 0,1,16 ;store seventeenth value at 1016
001052   142000   IN 0,0 ;input eightteenth value from user
001053   144001   OUT 0,1 ;output eightteenth value to console printer
001054   004121   STR 0,1,17 ;store eightteenth value at 1017
001055   142000   IN 0,0 ;input nineteenth value from user
001056   144001   OUT 0,1 ;output nineteenth value to console printer
001057   004122   STR 0,1,18 ;store nineteenth value at 1018
001060   142000   IN 0,0 ;input twentyth value from user
001061   144001   OUT 0,1 ;output twentyth value to console printer
001062   004123   STR 0,1,19 ;store twentyth value at 1019
                  LOC 20
000024   003420   LDR 3,0,16  ;load looping criteria
000025   035427   SOB 3,0,23  ;if looping criteria > 0, jump into loop
000026   026220   JMA 2,16  ;jump to end to print outputVal IXR2(30) + 16 = 46 
000027   003014   LDR 2,0,12  ;load GPR2 with superval
000030   013061   SMR 2,0,17,1 ;Subtract contents(17)->contents(add of nextInputVal), compares with superVal
000031   037202   JGE 2,2,2 ;if GPR2 >= 0, jump to line 32 to store looping criteria and store diff, else get abs val and store
000032   002017   LDR 0,0,15  ;set GPR0 to 0
000033   016001   SIR 0,1  ;set GPR0 to -1, so we can get abs val by multiplying
000034   005420   STR 3,0,16  ;GPR3 contains number of times to loop, temporarily storing it to use GPR3 b/c abt to be overwritten
000035   161000   MLT 2,0  ;GPR3 gets absolute val of current diff with multiply
000036   005415   STR 3,0,13 ;store diff between superVal and curr inputVal
000037   026204   JMA 2,4 ;IXR2(30) + 4 = 34, jump over line 32 to line 34 because GPR2 and 3 already stored
000040   005420   STR 3,0,16 ;store looping criteria
000041   005015   STR 2,0,13 ;store diff between superVal and curr inputVal
000042   002016   LDR 0,0,14  ;load GPR0 with old minimum diff
000043   012015   SMR 0,0,13  ;old diff - new diff 
000044   036210   JGE 0,2,8  ;new diff less than old, so jump to line 38
000045   026214   JMA 2,12 ;IXR2(30) + 12 = 42, old diff less than new, so jump to increment nextInputVal
000046   003015   LDR 2,0,13 ;load GPR with new minimum diff
000047   005016   STR 2,0,14 ;overwrite old min diff with new min diff that is in GPR2
000050   003021   LDR 2,0,17 ;get address of inputVal closest to superVal
000051   005013   STR 2,0,11 ;Store address of new inputVal closest to superVal @ 11 for output
000052   002421   LDR 1,0,17 ;GPR1 gets 1000 which is address of nextInputVal, Increments address of next inputval @ 17
000053   014401   AIR 1,1 ;increment GPR1 to get address of nextInputVal
000054   004421   STR 1,0,17 ;Store address of nextInputVal at address 17
000055   026024   JMA 0,20 ;jump to top of loop block
000056   003453   LDR 3,0,11,1 ;get c(11)  -> c(inputVal) that is closest to superVal, indirect bit
000057   145401   OUT 3,1  ;OUTPUT number closest to superVal
